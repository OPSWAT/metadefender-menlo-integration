image:
  name: 108895011981.dkr.ecr.us-west-2.amazonaws.com/aws-terragrunt:1.0.3-eks
  aws: 
    access-key: $AWS_ACCESS_KEY_ID_dev
    secret-key: $AWS_SECRET_ACCESS_KEY_dev

definitions:
  steps:
    - step: &build_deploy
        name: Build images and deploy to EKS
        services:
          - docker
        caches:
          - docker
        script:
          - |
            export VERSION=${BITBUCKET_COMMIT:0:7}
            export MENLO_ENV=${BITBUCKET_DEPLOYMENT_ENVIRONMENT}
            export EKS_CLUSTER=mdcl-menlo-${MENLO_ENV}
            if [[ $CDR_WORKFLOW == "true" ]]; then
              export EKS_NAMESPACE=menlo-${MENLO_ENV}-cdr
              export MDCLOUD_RULE="cdr"
            else 
              export EKS_NAMESPACE=menlo-${MENLO_ENV}
              export MDCLOUD_RULE="multiscan, sanitize, unarchive"
            fi
            cd kubernetes
            ./deploy.aws.sh build_image
            ./deploy.aws.sh ecr_login
            ./deploy.aws.sh push_image
            ./deploy.aws.sh configure_cluster
            kubectl get namespace $EKS_NAMESPACE || kubectl create namespace $EKS_NAMESPACE
            envsubst < deployment.yaml > deployment.yaml.tmp && mv deployment.yaml.tmp deployment.yaml
            envsubst < ingress.yaml > ingress.yaml.tmp && mv ingress.yaml.tmp ingress.yaml
            ./deploy.aws.sh apply_deployment
            ./deploy.aws.sh apply_service
            ./deploy.aws.sh apply_ingress

pipelines:
  custom:
    manual-dev:
      - variables:
          - name: CDR_WORKFLOW # set to true to deploy CDR only workflow to a separate namespace
            default: false
      - step: 
          <<: *build_deploy
          deployment: dev
    manual-prod:
      - variables:
          - name: CDR_WORKFLOW # set to true to deploy CDR only workflow to a separate namespace
            default: false
      - step:
          <<: *build_deploy
          deployment: prod
